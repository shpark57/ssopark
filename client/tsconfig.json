{
  "compilerOptions": {
    "baseUrl": "./",
    "target": "es6",    // ECMAScript 대상 버전 지정:"ES3" (기본 값)"ES5""ES6"/"ES2015""ES2016""ES2017""ES2018""ES2019""ES2020""ESNext" 주의사항: "ESNext"는 최신 ES 제안 기능을 대상으로 합니다.
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,    // js 파일들 ts에서 import해서 쓸 수 있는지 
    "skipLibCheck": true,   // 모든 선언 파일(*.d.ts)의 타입 검사를 건너뜁니다.
    "esModuleInterop": true,    // 런타임 바벨 생태계 호환성을 위한 __importStar와 __importDefault 헬퍼를 내보내고 타입 시스템 호환성을 위해 --allowSyntheticDefaultImports를 활성화합니다.
    "allowSyntheticDefaultImports": true,   //default export가 없는 모듈에서 default imports를 허용합니다. 코드 방출에는 영향을 주지 않으며, 타입 검사만 수행합니다.
    "strict": true,   //strict 관련, noimplicit 어쩌구 관련 모드 전부 켜기
    "forceConsistentCasingInFileNames": true,   //동일 파일 참조에 대해 일관성 없는 대소문자를 비활성화합니다.
    "noFallthroughCasesInSwitch": true,   // 스위치 문에 fallthrough 케이스에 대한 오류를 보고합니다.
    "module": "esnext",   //무슨 import 문법 쓸건지 'commonjs', 'amd', 'es2015', 'esnext'
    "moduleResolution": "node",   // 모듈 해석 방법 결정. Node.js/io.js 스타일 해석의 경우, "Node" 또는 "Classic" 중 하나입니다. 자세한 내용은 모듈 해석 문서를 참조하세요.
    "resolveJsonModule": true,    // .json 확장자로 import된 모듈을 포함합니다.
    "isolatedModules": true,    // 추가 검사를 수행하여 별도의 컴파일 (예를 들어 트랜스파일된 모듈 혹은 @babel/plugin-transform-typescript) 이 안전한지 확인합니다.
    "noEmit": true,   //출력을 내보내지 않습니다.
    "jsx": "react-jsx",   // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
    "typeRoots": ["./src/types", "./node_modules/@types"],    // 타입 정의가 포함될 폴더의 목록. 자세한 내용은 @types, --typeRoots 및 --types를 참조하세요.
    "declaration": true,    ///컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)
    "declarationDir": "./src/types"   // 생성된 선언 파일의 출력 디렉토리입니다.

  },
  "include": [
    "src/**/*"
  ],
  "paths": {
    "crypto": [
      "./src/types/crypto-browserify"
    ]
  }
}
